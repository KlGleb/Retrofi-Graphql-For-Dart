
input PageIndex {
  index: Int!
  page: Int!
}

type Product {
  id: ID!
  name: String!
  price: Float!
  wasPrice: Float
}

input ProductInput {
  name: String!
  price: Float!
  wasPrice: Float
}

type Query {

  getProducts(pageIndex: PageIndex): [Product!]!
  getProductById(id: ID!): Product!

  getProductsByPriceRange(min: Float!, max: Float!): [Product!]!

  getAllProducts(): [Product!]!

  getCounts(): [[Product!]!]!

}

type Mutation {
  createProduct(input: ProductInput!): Product!
  deleteProduct(id: ID!): Product!
}

query ProductService($id: ID!, $pageIndex: PageIndex!) {

  getProducts(pageIndex: $pageIndex) {
    id, name, price, wasPrice
  }

  getProductById(id: $id) {
    id name
  }

  getCounts {
    ...ProductFragment
  }

}

query ProductService1 {
  
  getAllProducts {
    id name
  }

}

query ProductService2($min: Float!, $max: Float!) {
  
  getProductsByPriceRange(min: $min, max: $max) {
    ...ProductFragment
  }

}


mutation ProductServiceMutation($id: ID!, $input: ProductInput!) {
  createProduct(input: $input) {
    ...ProductFragment
  }

  deleteProduct(id: $id) {
    id
  }
}


fragment ProductFragment on Product {
  id name price wasPrice
}
